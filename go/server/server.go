package main

import (
	"context"
	"flag"
	"fmt"
	"google.golang.org/grpc"
	pb "google.golang.org/grpc/examples/helloworld/helloworld"
	"log"
	"net"
)

var (
	port = flag.Int("port", 50051, "The server port")
)

// this struct implements GreeterServer interface
type server struct {
	pb.UnimplementedGreeterServer // generated by protoc. It is an Anonymous Field, with the same name as the type (pb.UnimplementedGreeterServer).
}

// SayHello is the function to be called remotely. It is a method of the server struct (class)
// the rust counterpart would be similar to:
//
//	struct Server{
//		  greeter: UnimplementedGreeterServer
//	}
//
// // GreeterServer is a trait in Rust, that is like an interface, but more powerful
// impl GreeterServer for Server { // here we implement the trait for the struct server
//
//	     // 'pub' because SayHello is public in Go.
//	     // '&' because pointers are complex to deal with in rust and '&' is like a pointer but with compiler checks!
//	     // 'Result' because in Rust Exceptions and nil/null doesn't exist.
//		pub fn say_hello(ctx: Context, in: &HelloRequest) -> Result<HelloReply> {
//				...
//		}
//	}
//
// the java counterpart would be similar to:
//
//	public class Server {
//			public HelloReply sayHello(Context ctx, HelloRequest in) throws Exception {
//				...
//			}
//	}
func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
	log.Printf("Received: %v", in.GetName())
	return &pb.HelloReply{Message: "Hello " + in.GetName()}, nil
}

// Run in the server/ directory
// go run .\server.go
func main() {
	flag.Parse()

	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", *port))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterGreeterServer(s, &server{}) // this is a pointer to a newly created server struct that implements GreeterServer
	log.Printf("server listening at %v", lis.Addr())

	// this is like C's
	// int err;
	// if ((err = s.serve(lis) != ERROR_CONSTANT) {}
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
