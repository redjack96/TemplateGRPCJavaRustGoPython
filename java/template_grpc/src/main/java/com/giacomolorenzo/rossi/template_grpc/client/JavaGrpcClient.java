package com.giacomolorenzo.rossi.template_grpc.client;

import io.grpc.Channel;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;
import io.grpc.examples.helloworld.GreeterGrpc;
import io.grpc.examples.helloworld.HelloReply;
import io.grpc.examples.helloworld.HelloRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.TimeUnit;

// Nota bene: inizialmente il codice degli stub non Ã¨ presente, quindi IntelliJ mostra degli errori, ma possono essere eliminati dopo la compilazione... (importa se ti permette di farlo)
// Se si esegue con maven, gli stub vengono compilati in file .class ma non vengono mostrati i file .java degli stub. Trovi i file generati in target/gerenrated-sources/protobuf/
// Esegui con:
// mvn verify
// mvn exec:java -q -D"exec.mainClass"="com.giacomolorenzo.rossi.template_grpc.client.JavaGrpcClient" -D"exec.args"="giacomo localhost:50051"
public class JavaGrpcClient {
	private static final Logger LOGGER = LoggerFactory.getLogger(JavaGrpcClient.class);

	private final GreeterGrpc.GreeterBlockingStub blockingStub;

	public JavaGrpcClient(Channel channel) {
		this.blockingStub = GreeterGrpc.newBlockingStub(channel);
	}

	// Uses both HelloRequest and HelloReply messages, defined in helloworld.proto
	public void sayHello(String name){
		LOGGER.info("Will try to greet %s name...".formatted(name));
		// These two classes HelloRequest and HelloReply are generated by protoc (check with Ctrl+Click)
		HelloRequest request = HelloRequest.newBuilder()
				.setName(name)
				.build();
		HelloReply response;
		try {
			response = blockingStub.sayHello(request);
			LOGGER.info("ooooooooooooooooo Greeting: {}", response.getMessage()); // like println!("Greeting: {}", response.get_message()) in Rust
		} catch (StatusRuntimeException e){
			LOGGER.warn("xxxxxxxxxxxxxxxxx gRPC failed: {} xxxxxxxxxxxxxxxxx", e.getStatus());
		}
	}

	/**
	 * Puoi passare argomenti a linea di comando usando l'opzione -Dexec.args, ad esempio:
	 * mvn exec:java -D"com.giacomolorenzo.rossi.template_grpc.GrpcClient" -D"exec.args"="giacomo localhost:50051"
	 * mvn exec:java -D"com.giacomolorenzo.rossi.template_grpc.GrpcClient" -D"exec.args"="--help"
	 * @param args 0: the name of the server; 1: the target server
	 */
	public static void main(String[] args) throws Exception{
		String user = "world";
		String target = "localhost:50051"; //TODO crea un file di configurazione o una variabile d'ambiente.
		if (args.length > 0 ){
			if ("--help".equals(args[0])){
				System.err.printf("""
						Usage: [name [target]]

						name	the name you wish to be greeted by. Defaults to %s
						target	The server to connect to. Defaults to %s%n""",
						user, target);
				System.exit(1);
			}
			user = args[0];
		}
		if (args.length > 1){
			target = args[1];
		}

		ManagedChannel channel = ManagedChannelBuilder.forTarget(target)
				.usePlaintext() // canali sicuri per default. TODO: rimuovi questo per abilitare SSL/TLS
				.build();
		try{
			var client = new JavaGrpcClient(channel);
			client.sayHello(user);
		} finally {
			// usano risorse come thread e connessioni TCP, quindi vanno chiusi per evitare memory leaks
			channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);
		}
	}
}
